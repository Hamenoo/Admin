-- Made by Hameno,Maku with special thanks to LoganRMX and Nick
local iIiI11iIi11iiIIII11 = {} for lIliii11I1iliIiII1lll = 0, 255 do local iIIli1l1lll1lIllllI, lIl1l11ii1lllI11i11ll = string.char(lIliii11I1iliIiII1lll), string.char(lIliii11I1iliIiII1lll, 0) iIiI11iIi11iiIIII11[lIl1l11ii1lllI11i11ll] = iIIli1l1lll1lIllllI end local iIiiiIi1iII11Ilil11 = function(lIlIIi11i1I11IIIIill1, I1Il1l1iI1i1IiI1Iil, IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11) if IiiilII1i11i1ili1ii >= 256 then IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11 = 0, iIIlIIilIlliIilIi11 + 1 if iIIlIIilIlliIilIi11 >= 256 then I1Il1l1iI1i1IiI1Iil = {} iIIlIIilIlliIilIi11 = 1 end end I1Il1l1iI1i1IiI1Iil[string.char(IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11)] = lIlIIi11i1I11IIIIill1 IiiilII1i11i1ili1ii = IiiilII1i11i1ili1ii + 1 return I1Il1l1iI1i1IiI1Iil, IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11 end local function II1IIili1I1ilIlIili(IIIil1i1Iii1IIliIIi) local liI1lIli1IIlIIIilli = #IIIil1i1Iii1IIliIIi local I1Il1l1iI1i1IiI1Iil = {} local IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11 = 0, 1 local Iiilliiii1lilI1Iiil = {} local i1IllIiIiliI1lIiiI1 = 1 local Il11lIlII1lll1l1llI = string.sub(IIIil1i1Iii1IIliIIi, 1, 2) Iiilliiii1lilI1Iiil[i1IllIiIiliI1lIiiI1] = iIiI11iIi11iiIIII11[Il11lIlII1lll1l1llI] or I1Il1l1iI1i1IiI1Iil[Il11lIlII1lll1l1llI] i1IllIiIiliI1lIiiI1 = i1IllIiIiliI1lIiiI1 + 1 for lIliii11I1iliIiII1lll = 3, liI1lIli1IIlIIIilli, 2 do local lIlllliIilIl11I111ll1 = string.sub(IIIil1i1Iii1IIliIIi, lIliii11I1iliIiII1lll, lIliii11I1iliIiII1lll + 1) local IiIi111l111i1ll1Ill = iIiI11iIi11iiIIII11[Il11lIlII1lll1l1llI] or I1Il1l1iI1i1IiI1Iil[Il11lIlII1lll1l1llI] local lIllIl1iI1I1liIIiIII1 = iIiI11iIi11iiIIII11[lIlllliIilIl11I111ll1] or I1Il1l1iI1i1IiI1Iil[lIlllliIilIl11I111ll1] if lIllIl1iI1I1liIIiIII1 then Iiilliiii1lilI1Iiil[i1IllIiIiliI1lIiiI1] = lIllIl1iI1I1liIIiIII1 i1IllIiIiliI1lIiiI1 = i1IllIiIiliI1lIiiI1 + 1 I1Il1l1iI1i1IiI1Iil, IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11 = iIiiiIi1iII11Ilil11(IiIi111l111i1ll1Ill .. string.sub(lIllIl1iI1I1liIIiIII1, 1, 1), I1Il1l1iI1i1IiI1Iil, IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11) else local I1IIIliII1lIliII1ll = IiIi111l111i1ll1Ill .. string.sub(IiIi111l111i1ll1Ill, 1, 1) Iiilliiii1lilI1Iiil[i1IllIiIiliI1lIiiI1] = I1IIIliII1lIliII1ll i1IllIiIiliI1lIiiI1 = i1IllIiIiliI1lIiiI1 + 1 I1Il1l1iI1i1IiI1Iil, IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11 = iIiiiIi1iII11Ilil11(I1IIIliII1lIliII1ll, I1Il1l1iI1i1IiI1Iil, IiiilII1i11i1ili1ii, iIIlIIilIlliIilIi11) end Il11lIlII1lll1l1llI = lIlllliIilIl11I111ll1 end return table.concat(Iiilliiii1lilI1Iiil) end local l11l1lI1lil1ll1iili = function(IIIil1i1Iii1IIliIIi) return ({ IIIil1i1Iii1IIliIIi:sub(5):gsub("..", function(I11lIiiiI1iiI11IIli) return string.char(tonumber(I11lIiiiI1iiI11IIli, 16)) end) })[1] end if not pcall(loadstring, "return") then error("Your Lua environment does not support loadstring, therefore you are unable to use the Luraph VM compression feature.") end loadstring(II1IIili1I1ilIlIili(l11l1lI1lil1ll1iili
